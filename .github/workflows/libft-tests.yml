name: Libft Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y build-essential libbsd-dev python3 python3-venv python3-pip
      
    - name: Build libft
      run: make
      
    - name: Run make clean and verify .o files are removed
      run: |
        make clean
        if [ -n "$(find . -name '*.o')" ]; then
          echo "make clean did not remove all .o files"
          exit 1
        fi
        
    - name: Rebuild for tests
      run: make
        
    - name: Run make fclean and verify library is removed
      run: |
        make fclean
        if [ -f "libft.a" ]; then
          echo "make fclean did not remove the library"
          exit 1
        fi
        
    - name: Test make re
      run: |
        make re
        if [ ! -f "libft.a" ]; then
          echo "make re did not rebuild the library"
          exit 1
        fi
        
    # Run tests from external repository
    - name: Clone test repository
      run: |
        git clone https://github.com/solrac97gr/libft-test.git tests-repo
        
    - name: Run external tests
      run: |
        # Create a temporary test directory
        mkdir -p temp_test_dir
        cd temp_test_dir
        
        # Copy your source files (non-test files) and header
        cp ../ft_*.c .
        cp ../libft.h .
        
        # Copy test files from the test repository 
        cp ../tests-repo/ft_*_test.c .
        cp ../tests-repo/scripts/run_tests.sh .
        
        # Make the test script executable and run it
        chmod +x run_tests.sh
        ./run_tests.sh | tee test_output.txt
        
        # Copy the output back to the main directory
        cp test_output.txt ..
        cd ..
        
        # Check for test failures
        if grep -q "\[FAIL\]" test_output.txt; then
          echo "Some tests failed"
          cat test_output.txt
          exit 1
        fi
        
    - name: Install and Run Francinette
      run: |
        echo "Installing Francinette..."
        # Clone Francinette repository
        git clone https://github.com/xicodomingues/francinette.git ~/francinette
        cd ~/francinette
        
        # Install Francinette dependencies
        python3 -m venv .venv
        source .venv/bin/activate
        pip install -r requirements.txt
        
        # Create symlinks for easier execution
        echo '#!/bin/bash' > ~/francinette/tester.sh
        echo 'cd "$(dirname "$0")"' >> ~/francinette/tester.sh
        echo 'source .venv/bin/activate' >> ~/francinette/tester.sh
        echo 'python3 main.py "$@"' >> ~/francinette/tester.sh
        chmod +x ~/francinette/tester.sh
        
        # Return to workspace and prepare for Francinette
        cd ${GITHUB_WORKSPACE}
        
        # Ensure project is properly built before testing
        make fclean
        make
        
        # Verify project structure for Francinette compatibility
        echo "Verifying project structure..."
        if [ ! -f "libft.h" ]; then
          echo "Error: libft.h not found"
          exit 1
        fi
        
        # Display project files for debugging
        echo "Project files:"
        ls -la
        
        # Display Makefile content for debugging
        echo "Makefile content:"
        cat Makefile

        # Run the setup script to help Francinette detect the project
        echo "Setting up the project for Francinette detection..."
        chmod +x scripts/setup_for_francinette.sh
        ./scripts/setup_for_francinette.sh
        
        # Create a custom .project_type file for Francinette
        echo "libft" > .project_type
        
        # Force Francinette to recognize the project as libft
        echo "Running Francinette tests for libft..."
        
        # Run basic tests first
        echo "Running basic tests..."
        ~/francinette/tester.sh -p libft || echo "Some Francinette tests failed"
        
        # Run with strict mode
        echo "Running strict mode tests..."
        ~/francinette/tester.sh -p libft --strict || echo "Some Francinette strict tests failed but continuing workflow"
        
        # Run specific tests using Tripouille tester
        echo "Running Tripouille libft tester..."
        ~/francinette/tester.sh -p libft -t tripouille || echo "Some Tripouille tests failed but continuing workflow"
        
        # Report completion
        echo "Francinette tests completed"
